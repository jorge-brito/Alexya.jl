# Use
#    @warnpcfail precompile(args...)
# if you want to be warned when a precompile directive fails
macro warnpcfail(ex::Expr)
    modl = __module__
    file = __source__.file === nothing ? "?" : String(__source__.file)
    line = __source__.line
    quote
        $(esc(ex)) || @warn """precompile directive
     $($(Expr(:quote, ex)))
 failed. Please report an issue in $($modl) (after checking for duplicates) or remove this directive.""" _file=$file _line=$line
    end
end


function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    isdefined(Alexya, Symbol("##Scale#11")) && precompile(Tuple{Alexya.var"##Scale#11", Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:margin, :align), Tuple{NamedTuple{(:top, :left, :right, :bottom), Tuple{Int64, Int64, Int64, Int64}}, Array{Base.Pair{A, B} where B where A, 1}}}}, typeof(Alexya.Scale), Bool, Vararg{Any}})
    isdefined(Alexya, Symbol("##Scale#11")) && precompile(Tuple{Alexya.var"##Scale#11", Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:hexpand,), Tuple{Bool}}}, typeof(Alexya.Scale), Bool, Vararg{Any}})
    isdefined(Alexya, Symbol("##Scale#11")) && precompile(Tuple{Alexya.var"##Scale#11", Base.Pairs{Symbol, Integer, Tuple{Symbol, Symbol}, NamedTuple{(:margin_bottom, :hexpand), Tuple{Int64, Bool}}}, typeof(Alexya.Scale), Bool, Vararg{Any}})
    isdefined(Alexya, Symbol("##Scale#11")) && precompile(Tuple{Alexya.var"##Scale#11", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Alexya.Scale), Bool, Vararg{Any}})
    isdefined(Alexya, Symbol("#@align")) && precompile(Tuple{Alexya.var"#@align", LineNumberNode, Module, Int, Int})
    isdefined(Alexya, Symbol("#@button_str")) && precompile(Tuple{Alexya.var"#@button_str", LineNumberNode, Module, Int})
    isdefined(Alexya, Symbol("#@canvas")) && precompile(Tuple{Alexya.var"#@canvas", LineNumberNode, Module})
    isdefined(Alexya, Symbol("#@colorbtn_str")) && precompile(Tuple{Alexya.var"#@colorbtn_str", LineNumberNode, Module, Int})
    isdefined(Alexya, Symbol("#@create")) && precompile(Tuple{Alexya.var"#@create", LineNumberNode, Module, Int})
    isdefined(Alexya, Symbol("#@entry_str")) && precompile(Tuple{Alexya.var"#@entry_str", LineNumberNode, Module, Int})
    isdefined(Alexya, Symbol("#@framecount")) && precompile(Tuple{Alexya.var"#@framecount", LineNumberNode, Module})
    isdefined(Alexya, Symbol("#@framerate")) && precompile(Tuple{Alexya.var"#@framerate", LineNumberNode, Module})
    isdefined(Alexya, Symbol("#@height")) && precompile(Tuple{Alexya.var"#@height", LineNumberNode, Module})
    isdefined(Alexya, Symbol("#@hexpand")) && precompile(Tuple{Alexya.var"#@hexpand", LineNumberNode, Module})
    isdefined(Alexya, Symbol("#@homogeneous")) && precompile(Tuple{Alexya.var"#@homogeneous", LineNumberNode, Module, Int, Int})
    isdefined(Alexya, Symbol("#@homogeneous")) && precompile(Tuple{Alexya.var"#@homogeneous", LineNumberNode, Module})
    isdefined(Alexya, Symbol("#@init")) && precompile(Tuple{Alexya.var"#@init", LineNumberNode, Module, Int, Int, Int})
    isdefined(Alexya, Symbol("#@label_str")) && precompile(Tuple{Alexya.var"#@label_str", LineNumberNode, Module, Int})
    isdefined(Alexya, Symbol("#@layout")) && precompile(Tuple{Alexya.var"#@layout", LineNumberNode, Module, Int})
    isdefined(Alexya, Symbol("#@margin")) && precompile(Tuple{Alexya.var"#@margin", LineNumberNode, Module, Int, Int, Int, Int})
    isdefined(Alexya, Symbol("#@margin")) && precompile(Tuple{Alexya.var"#@margin", LineNumberNode, Module, Int, Int})
    isdefined(Alexya, Symbol("#@margin")) && precompile(Tuple{Alexya.var"#@margin", LineNumberNode, Module, Int})
    isdefined(Alexya, Symbol("#@on")) && precompile(Tuple{Alexya.var"#@on", LineNumberNode, Module, Vararg{Any}})
    isdefined(Alexya, Symbol("#@options")) && precompile(Tuple{Alexya.var"#@options", LineNumberNode, Module, Int})
    isdefined(Alexya, Symbol("#@use")) && precompile(Tuple{Alexya.var"#@use", LineNumberNode, Module, Int})
    isdefined(Alexya, Symbol("#@vexpand")) && precompile(Tuple{Alexya.var"#@vexpand", LineNumberNode, Module, Int})
    isdefined(Alexya, Symbol("#@width")) && precompile(Tuple{Alexya.var"#@width", LineNumberNode, Module})
    isdefined(Alexya, Symbol("#@window")) && precompile(Tuple{Alexya.var"#@window", LineNumberNode, Module})
    isdefined(Alexya, Symbol("#Box##kw")) && precompile(Tuple{Alexya.var"#Box##kw", NamedTuple{(:margin, :hexpand, :vexpand, :align), Tuple{NamedTuple{(:top, :left, :right, :bottom), Tuple{Int64, Int64, Int64, Int64}}, Bool, Bool, Array{Base.Pair{A, B} where B where A, 1}}}, typeof(Alexya.Box), Tuple{}, Symbol})
    isdefined(Alexya, Symbol("#Button##kw")) && precompile(Tuple{Alexya.var"#Button##kw", NamedTuple{(:hexpand,), Tuple{Bool}}, typeof(Alexya.Button), String})
    isdefined(Alexya, Symbol("#Entry##kw")) && precompile(Tuple{Alexya.var"#Entry##kw", NamedTuple{(:text, :margin), Tuple{String, NamedTuple{(:top, :left, :right, :bottom), Tuple{Int64, Int64, Int64, Int64}}}}, typeof(Alexya.Entry)})
    isdefined(Alexya, Symbol("#Entry##kw")) && precompile(Tuple{Alexya.var"#Entry##kw", NamedTuple{(:text,), Tuple{String}}, typeof(Alexya.Entry)})
    isdefined(Alexya, Symbol("#Grid##kw")) && precompile(Tuple{Alexya.var"#Grid##kw", NamedTuple{(:____,), Tuple{Array{(Base.Pair{A, B} where B) where A, 1}}}, typeof(Alexya.Grid), typeof(identity)})
    isdefined(Alexya, Symbol("#Grid##kw")) && precompile(Tuple{Alexya.var"#Grid##kw", NamedTuple{(:____,), Tuple{Array{Base.Pair{A, B} where B where A, 1}}}, typeof(Alexya.Grid), Array{Any, 2}})
    isdefined(Alexya, Symbol("#Grid##kw")) && precompile(Tuple{Alexya.var"#Grid##kw", NamedTuple{(:homogeneous,), Tuple{Array{Base.Pair{A, B} where B where A, 1}}}, typeof(Alexya.Grid), Array{Any, 2}})
    isdefined(Alexya, Symbol("#Label##kw")) && precompile(Tuple{Alexya.var"#Label##kw", NamedTuple{(:halign,), Tuple{Int32}}, typeof(Alexya.Label), String})
    isdefined(Alexya, Symbol("#Label##kw")) && precompile(Tuple{Alexya.var"#Label##kw", NamedTuple{(:margin_left, :halign), Tuple{Int64, Int32}}, typeof(Alexya.Label), String})
    isdefined(Alexya, Symbol("#Slider##kw")) && precompile(Tuple{Alexya.var"#Slider##kw", NamedTuple{(:init,), Tuple{Int64}}, typeof(Alexya.Slider), Base.UnitRange{Int64}})
    isdefined(Alexya, Symbol("#Slider##kw")) && precompile(Tuple{Alexya.var"#Slider##kw", NamedTuple{(:margin, :align), Tuple{NamedTuple{(:top, :left, :right, :bottom), Tuple{Int64, Int64, Int64, Int64}}, Array{Base.Pair{A, B} where B where A, 1}}}, typeof(Alexya.Slider), Base.UnitRange{Int64}})
    isdefined(Alexya, Symbol("#SpinButton##kw")) && precompile(Tuple{Alexya.var"#SpinButton##kw", NamedTuple{(:init, :halign), Tuple{Float64, Int32}}, typeof(Alexya.SpinButton), Base.UnitRange{Int64}})
    isdefined(Alexya, Symbol("#SpinButton##kw")) && precompile(Tuple{Alexya.var"#SpinButton##kw", NamedTuple{(:init, :halign), Tuple{Int64, Int32}}, typeof(Alexya.SpinButton), Base.UnitRange{Int64}})
    isdefined(Alexya, Symbol("#Switch##kw")) && precompile(Tuple{Alexya.var"#Switch##kw", NamedTuple{(:halign,), Tuple{Int32}}, typeof(Alexya.Switch), Bool})
    isdefined(Alexya, Symbol("#set!##kw")) && precompile(Tuple{Alexya.var"#set!##kw", NamedTuple{(:active,), Tuple{Bool}}, typeof(Alexya.set!), Gtk.GtkSwitchLeaf})
    isdefined(Alexya, Symbol("#set!##kw")) && precompile(Tuple{Alexya.var"#set!##kw", NamedTuple{(:margin,), Tuple{NamedTuple{(:top, :left, :right, :bottom), Tuple{Int64, Int64, Int64, Int64}}}}, typeof(Alexya.set!), Gtk.GtkBoxLeaf})
    isdefined(Alexya, Symbol("#set!##kw")) && precompile(Tuple{Alexya.var"#set!##kw", NamedTuple{(:rgba,), Tuple{ColorTypes.RGB{ColorTypes.FixedPointNumbers.Normed{UInt8, 8}}}}, typeof(Alexya.set!), Gtk.GtkColorButtonLeaf})
    isdefined(Alexya, Symbol("#set!##kw")) && precompile(Tuple{Alexya.var"#set!##kw", NamedTuple{(:text,), Tuple{String}}, typeof(Alexya.set!), Gtk.GtkEntryLeaf})
    isdefined(Alexya, Symbol("#start##kw")) && precompile(Tuple{Alexya.var"#start##kw", NamedTuple{(:async,), Tuple{Bool}}, typeof(Alexya.start)})
    precompile(Tuple{typeof(Alexya.ColorButton), ColorTypes.RGB{ColorTypes.FixedPointNumbers.Normed{UInt8, 8}}})
    precompile(Tuple{typeof(Alexya.ColorButton)})
    precompile(Tuple{typeof(Alexya.Label), String})
    precompile(Tuple{typeof(Alexya.ProgressBar)})
    precompile(Tuple{typeof(Alexya.Scale), Bool, Vararg{Any}})
    precompile(Tuple{typeof(Alexya.SpinButton), Base.UnitRange{Int64}})
    precompile(Tuple{typeof(Alexya.Spinner)})
    precompile(Tuple{typeof(Alexya.Switch), Bool})
    precompile(Tuple{typeof(Alexya.add!), Gtk.GtkBoxLeaf, Gtk.GtkButtonLeaf, Gtk.GtkSpinButtonLeaf, Vararg{Gtk.GtkWidget}})
    precompile(Tuple{typeof(Alexya.add!), Gtk.GtkBoxLeaf, Gtk.GtkButtonLeaf})
    precompile(Tuple{typeof(Alexya.add!), Gtk.GtkBoxLeaf, Gtk.GtkCheckButtonLeaf})
    precompile(Tuple{typeof(Alexya.add!), Gtk.GtkBoxLeaf, Gtk.GtkColorButtonLeaf})
    precompile(Tuple{typeof(Alexya.add!), Gtk.GtkBoxLeaf, Gtk.GtkEntryLeaf, Gtk.GtkScaleLeaf, Vararg{Gtk.GtkWidget}})
    precompile(Tuple{typeof(Alexya.add!), Gtk.GtkBoxLeaf, Gtk.GtkEntryLeaf})
    precompile(Tuple{typeof(Alexya.add!), Gtk.GtkBoxLeaf, Gtk.GtkLabelLeaf})
    precompile(Tuple{typeof(Alexya.add!), Gtk.GtkBoxLeaf, Gtk.GtkScaleLeaf, Gtk.GtkSpinButtonLeaf, Vararg{Gtk.GtkWidget}})
    precompile(Tuple{typeof(Alexya.add!), Gtk.GtkBoxLeaf, Gtk.GtkScaleLeaf})
    precompile(Tuple{typeof(Alexya.add!), Gtk.GtkBoxLeaf, Gtk.GtkSpinButtonLeaf})
    precompile(Tuple{typeof(Alexya.add!), Gtk.GtkBoxLeaf, Gtk.GtkSwitchLeaf})
    precompile(Tuple{typeof(Alexya.add!), Gtk.GtkBoxLeaf, Tuple{Gtk.GtkButtonLeaf, Gtk.GtkSpinButtonLeaf, Gtk.GtkColorButtonLeaf}})
    precompile(Tuple{typeof(Alexya.add!), Gtk.GtkScrolledWindowLeaf, Gtk.GtkGridLeaf})
    precompile(Tuple{typeof(Alexya.add!), Gtk.GtkWindowLeaf, Gtk.GtkCanvas})
    precompile(Tuple{typeof(Alexya.add!), Gtk.GtkWindowLeaf, Gtk.GtkPanedLeaf})
    precompile(Tuple{typeof(Alexya.addwidget), Alexya.Controls})
    precompile(Tuple{typeof(Alexya.addwidget), Gtk.GtkEntryLeaf})
    precompile(Tuple{typeof(Alexya.addwidget), Gtk.GtkGridLeaf})
    precompile(Tuple{typeof(Alexya.addwidget), Gtk.GtkScaleLeaf})
    precompile(Tuple{typeof(Alexya.aside), Symbol, Int64})
    precompile(Tuple{typeof(Alexya.canvasonly), Gtk.GtkCanvas})
    precompile(Tuple{typeof(Alexya.create_option), Base.Complex{Int64}, Symbol})
    precompile(Tuple{typeof(Alexya.create_option), Base.UnitRange{Int64}, Symbol})
    precompile(Tuple{typeof(Alexya.create_option), Bool, Symbol})
    precompile(Tuple{typeof(Alexya.create_option), ColorTypes.RGB{ColorTypes.FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
    precompile(Tuple{typeof(Alexya.create_option), Int64, Symbol})
    precompile(Tuple{typeof(Alexya.create_option), Luxor.Point, Symbol})
    precompile(Tuple{typeof(Alexya.create_option), NamedTuple{(:complex, :point), Tuple{Base.Complex{Int64}, Luxor.Point}}, Symbol})
    precompile(Tuple{typeof(Alexya.create_option), NamedTuple{(:inspect, :close), Tuple{Gtk.GtkButtonLeaf, Gtk.GtkButtonLeaf}}, Symbol})
    precompile(Tuple{typeof(Alexya.create_option), NamedTuple{(:slider, :φ, :color, :switch), Tuple{Base.UnitRange{Int64}, Tuple{Base.UnitRange{Int64}, Int64}, ColorTypes.RGB{ColorTypes.FixedPointNumbers.Normed{UInt8, 8}}, Bool}}, Symbol})
    precompile(Tuple{typeof(Alexya.create_option), NamedTuple{(:text_field, :number, :δ), Tuple{String, Int64, Tuple{Int64, Base.UnitRange{Int64}}}}, Symbol})
    precompile(Tuple{typeof(Alexya.create_option), String, Symbol})
    precompile(Tuple{typeof(Alexya.create_option), Tuple{Base.UnitRange{Int64}, Int64}, Symbol})
    precompile(Tuple{typeof(Alexya.create_option), Tuple{Int64, Base.UnitRange{Int64}}, Symbol})
    precompile(Tuple{typeof(Alexya.current_app), Symbol})
    precompile(Tuple{typeof(Alexya.extend!), Array{Int64, 1}})
    precompile(Tuple{typeof(Alexya.getpoints), String})
    precompile(Tuple{typeof(Alexya.getprop), Gtk.GtkBoxLeaf, String, Type{Int64}})
    precompile(Tuple{typeof(Alexya.getprop), Gtk.GtkBoxLeaf, Symbol, Type{Bool}})
    precompile(Tuple{typeof(Alexya.getprop), Gtk.GtkBoxLeaf, Symbol, Type{UInt32}})
    precompile(Tuple{typeof(Alexya.getprop), Gtk.GtkEntryLeaf, Symbol, Type{String}})
    precompile(Tuple{typeof(Alexya.init), String, Int64, Int64})
    precompile(Tuple{typeof(Alexya.limit), Array{Int64, 1}, Int64})
    precompile(Tuple{typeof(Alexya.loadsprite), String})
    precompile(Tuple{typeof(Alexya.mag), Array{Int64, 1}})
    precompile(Tuple{typeof(Alexya.onevent), typeof(identity), Symbol, Alexya.Option{Gtk.GtkButton}})
    precompile(Tuple{typeof(Alexya.point), Array{Float64, 1}})
    precompile(Tuple{typeof(Alexya.set!), Gtk.GtkBoxLeaf, Symbol, Array{Base.Pair{A, B} where B where A, 1}})
    precompile(Tuple{typeof(Alexya.set!), Gtk.GtkBoxLeaf, Symbol, Bool})
    precompile(Tuple{typeof(Alexya.set!), Gtk.GtkBoxLeaf, Symbol, Int32})
    precompile(Tuple{typeof(Alexya.set!), Gtk.GtkBoxLeaf, Symbol, Int64})
    precompile(Tuple{typeof(Alexya.set!), Gtk.GtkBoxLeaf, Symbol, NamedTuple{(:top, :left, :right, :bottom), Tuple{Int64, Int64, Int64, Int64}}})
    precompile(Tuple{typeof(Alexya.set!), Gtk.GtkButtonLeaf, Symbol, typeof(identity)})
    precompile(Tuple{typeof(Alexya.set!), Gtk.GtkCheckButtonLeaf, Symbol, typeof(identity)})
    precompile(Tuple{typeof(Alexya.set!), Gtk.GtkEntryLeaf, Symbol, Bool})
    precompile(Tuple{typeof(Alexya.set!), Gtk.GtkEntryLeaf, Symbol, NamedTuple{(:top, :left, :right, :bottom), Tuple{Int64, Int64, Int64, Int64}}})
    precompile(Tuple{typeof(Alexya.set!), Gtk.GtkEntryLeaf, Symbol, String})
    precompile(Tuple{typeof(Alexya.set!), Gtk.GtkEntryLeaf, Symbol, typeof(identity)})
    precompile(Tuple{typeof(Alexya.set!), Gtk.GtkGridLeaf, Symbol, Bool})
    precompile(Tuple{typeof(Alexya.set!), Gtk.GtkGridLeaf, Symbol, Int64})
    precompile(Tuple{typeof(Alexya.set!), Gtk.GtkGridLeaf, Symbol, NamedTuple{(:top, :left, :right, :bottom), Tuple{Int64, Int64, Int64, Int64}}})
    precompile(Tuple{typeof(Alexya.set!), Gtk.GtkLabelLeaf, Symbol, Int32})
    precompile(Tuple{typeof(Alexya.set!), Gtk.GtkLabelLeaf, Symbol, Int64})
    precompile(Tuple{typeof(Alexya.set!), Gtk.GtkScaleLeaf, Symbol, Array{Base.Pair{A, B} where B where A, 1}})
    precompile(Tuple{typeof(Alexya.set!), Gtk.GtkScaleLeaf, Symbol, Bool})
    precompile(Tuple{typeof(Alexya.set!), Gtk.GtkScaleLeaf, Symbol, Int32})
    precompile(Tuple{typeof(Alexya.set!), Gtk.GtkScaleLeaf, Symbol, Int64})
    precompile(Tuple{typeof(Alexya.set!), Gtk.GtkScaleLeaf, Symbol, NamedTuple{(:top, :left, :right, :bottom), Tuple{Int64, Int64, Int64, Int64}}})
    precompile(Tuple{typeof(Alexya.set!), Gtk.GtkScaleLeaf, Symbol, typeof(identity)})
    precompile(Tuple{typeof(Alexya.set!), Gtk.GtkSpinButtonLeaf, Symbol, typeof(identity)})
    precompile(Tuple{typeof(Alexya.setevent), Alexya.Event{:appclosed}})
    precompile(Tuple{typeof(Alexya.setevent), Alexya.Event{:keypress}})
    precompile(Tuple{typeof(Alexya.setevent), Alexya.Event{:mousemotion}})
    precompile(Tuple{typeof(Alexya.setevent), Alexya.Event{:mousemove}})
    precompile(Tuple{typeof(Alexya.setevent), Alexya.Event{:mousepress}})
    precompile(Tuple{typeof(Alexya.setevent), Alexya.Event{:mouserelease}})
    precompile(Tuple{typeof(Alexya.setevent), Alexya.Event{:setup}})
    precompile(Tuple{typeof(Alexya.setevent), Alexya.Event{:update}})
    precompile(Tuple{typeof(Alexya.setvalue!), Gtk.GtkColorButtonLeaf, ColorTypes.RGB{ColorTypes.FixedPointNumbers.Normed{UInt8, 8}}})
    precompile(Tuple{typeof(Alexya.setvalue!), Gtk.GtkScaleLeaf, Float64})
    precompile(Tuple{typeof(Alexya.setvalue!), Gtk.GtkSpinButtonLeaf, Float64})
    precompile(Tuple{typeof(Alexya.setvalue!), Gtk.GtkSpinButtonLeaf, Int64})
    precompile(Tuple{typeof(Alexya.setvalue!), Gtk.GtkSwitchLeaf, Bool})
    precompile(Tuple{typeof(Alexya.start)})
    precompile(Tuple{typeof(Alexya.use), Symbol, typeof(identity)})
    precompile(Tuple{typeof(Alexya.uselayout), typeof(identity)})
    precompile(Tuple{typeof(Alexya.value), Gtk.GtkColorButtonLeaf})
    precompile(Tuple{typeof(Alexya.value), Gtk.GtkEntryLeaf})
    precompile(Tuple{typeof(Alexya.value), Gtk.GtkScaleLeaf})
    precompile(Tuple{typeof(Alexya.value), Gtk.GtkSpinButtonLeaf})
    precompile(Tuple{typeof(Alexya.value), Gtk.GtkSwitchLeaf})
    precompile(Tuple{typeof(Alexya.withangle), Base.Irrational{:π}, Int64})
    precompile(Tuple{typeof(Alexya.withangle), Float64, Float64})
end